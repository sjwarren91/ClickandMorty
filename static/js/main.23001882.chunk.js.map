{"version":3,"sources":["components/NavBar.js","components/Content.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","message","score","topScore","className","TransitionGroup","CSSTransition","appear","timeout","classNames","id","src","alt","Content","Card","props","style","backgroundImage","image","onClick","clickHandler","App","state","ricks","tracker","maxScore","animate","correct","document","getElementsByClassName","classList","add","setTimeout","unanimate","remove","track","newRicks","map","rick","clicked","handleCorrect","handleIncorrect","setState","reset","shuffled","shuffleRicks","i","length","j","Math","floor","random","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23001882.chunk.js","sourcesContent":["import React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport \"./NavBar.css\";\n\nfunction NavBar({ message, score, topScore }) {\n  return (\n    <div className=\"header\">\n      <div className=\"container\">\n        <TransitionGroup>\n          <CSSTransition appear={true} timeout={4000} classNames=\"title\">\n            <div>\n              <img id=\"logo\" src=\"./logo.png\" alt=\"Logo\" />\n            </div>\n          </CSSTransition>\n        </TransitionGroup>\n      </div>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from 'react';\r\nimport \"./Content.css\";\r\n\r\nfunction Content() {\r\n    return <div className=\"content\" />\r\n}\r\n\r\nexport default Content","import React from \"react\";\nimport \"./Card.css\";\n\nfunction Card(props) {\n    return (\n        <div className=\"card\" style={{backgroundImage: 'url(' + props.image + ')'}} onClick={() => {props.clickHandler(props.id)}} />\n    );\n}\n\nexport default Card\n","import React, { Component } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport NavBar from \"./components/NavBar\";\nimport Content from \"./components/Content\";\nimport Card from \"./components/Card\";\nimport \"./App.css\";\nimport ricks from \"./ricks.json\";\n\nclass App extends Component {\n  state = {\n    ricks: ricks,\n    tracker: true,\n    score: 0,\n    topScore: 0,\n    maxScore: 12,\n    message: \"Welcome! Click Ricks to earn points, but only click each Rick once!\"\n  };\n\n  animate = correct => {\n    let message = document.getElementsByClassName(\"messageP\")[0];\n\n    if (correct) {\n      message.classList.add(\"slide\");\n      setTimeout(this.unanimate, 1000);\n    } else {\n      message.classList.add(\"wiggle\");\n      setTimeout(this.unanimate, 820);\n\n    }\n  }\n\n  unanimate = () => {\n    let message = document.getElementsByClassName(\"messageP\")[0];\n    message.classList.remove(\"slide\");\n    message.classList.remove(\"wiggle\");\n  }\n\n  clickHandler = id => {\n    let track = false;\n    const newRicks = this.state.ricks.map(rick => {\n      if (rick.id === id && !rick.clicked) {\n        track = true;\n        this.animate(track);\n        return { ...rick, clicked: true };\n      } else if (rick.id === id) {\n        track = false;\n        this.animate(track);\n        return rick;\n      } else {\n        return rick;\n      }\n    });\n\n    if (!track) {\n      this.handleIncorrect();\n    } else {\n      this.handleCorrect(newRicks);\n    }\n  };\n\n  handleCorrect = ricks => {\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({ topScore: this.state.score + 1 });\n    }\n\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"Congrats, you clicked all the Ricks!\"\n      });\n      setTimeout(this.reset(\"Click a Rick to play again!\"), 1500)\n\n    } else {\n      const shuffled = this.shuffleRicks(ricks);\n      this.setState({\n        ricks: shuffled,\n        score: this.state.score + 1,\n        message: \"Correct!\"\n      });\n    }\n  };\n\n  handleIncorrect = () => {\n    this.reset(\"Incorrect! Remember to only click each Rick once!\")\n    setTimeout(() => {\n      this.setState({\n        message: \"Try again! Click each Rick once!\"\n      })\n    }, 1500);\n  };\n\n  shuffleRicks = ricks => {\n    for (let i = ricks.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [ricks[i], ricks[j]] = [ricks[j], ricks[i]];\n    }\n    return ricks;\n  };\n\n  reset = (message) => {\n    const newRicks = this.state.ricks.map(rick => {\n      return { ...rick, clicked: false };\n    });\n\n    this.setState({\n      ricks: newRicks,\n      message: message,\n      score: 0\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <Content />\n        <TransitionGroup>\n          <CSSTransition appear={true} timeout={6000} classNames={\"container\"}>\n            <div className=\"state-container\">\n              <div className=\"state\">\n                Score: {this.state.score} || Top Score: {this.state.topScore}\n              </div>\n              <div className=\"message\">\n                <p className=\"messageP\">{this.state.message}</p>\n              </div>\n            </div>\n          </CSSTransition>\n          <CSSTransition appear={true} timeout={6000} classNames={\"container\"}>\n            <div className=\"card-container\">\n              {this.state.ricks.map(rick => (\n                <Card key={rick.id} {...rick} clickHandler={this.clickHandler} />\n              ))}\n            </div>\n          </CSSTransition>\n        </TransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}